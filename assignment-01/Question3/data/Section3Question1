#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Oct  8 16:54:47 2018

@author: JonahTuckman
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.preprocessing import LabelEncoder, OneHotEncoder

#import the dataset
#Splitting the set based on Sign and Name
dataset = pd.read_csv("training.data", names = ['Sign'])
dataset[['Sign','Name']] = dataset["Sign"].str.split(" ", 1, expand=True)
X = dataset.iloc[: , 1:2].values
Y = dataset.iloc[: , 0:1].values

#Encoding string variables into binary numbers
labelencoder_X = LabelEncoder()
X[: , 0] = labelencoder_X.fit_transform(X[: , 0])
onehotencoder = OneHotEncoder(categorical_features = [0])
X = onehotencoder.fit_transform(X).toarray()
labelencoder_y = LabelEncoder()
Y = labelencoder_y.fit_transform(Y)

regressor = DecisionTreeRegressor()
regressor.fit(X, Y)

y_pred = regressor.predict(X)

#Prediction using test set

#Importing data
testingSet = pd.read_csv("test.data", names = ['Sign'])
#Splitting the set based on Sign and Name
testingSet[['Sign','Name']] = testingSet['Sign'].str.split(" ", 1, expand = True)
XTest = testingSet.iloc[: , 1:2].values
YTest = testingSet.iloc[: , 0:1].values
labelencoder_Xtest = LabelEncoder()
XTest[: , 0] = labelencoder_Xtest.fit_transform(XTest[: , 0])
onehotencoder = OneHotEncoder(categorical_features = [0])
XTest = onehotencoder.fit_transform(XTest).toarray()
labelencoder_Ytest = LabelEncoder()
YTest = labelencoder_Ytest.fit_transform(YTest)

regressorTest = DecisionTreeRegressor()
regressorTest.fit(XTest, YTest)

y_test_pred = regressorTest.predict(XTest)

X_grid = np.arange(min(X), max(X), 0.01)
X_grid = X_grid.reshape((len(X_grid), 1))
plt.scatter(X,Y, color = 'red')
plt.plot(X_grid, regressor.predict(X_grid), color = 'blue')
plt.show()

